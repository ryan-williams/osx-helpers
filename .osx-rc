#!/usr/bin/env bash

alias sopen='open -a Sublime\ Text.app'

alias flushdns='dscacheutil -flushcache;sudo killall -HUP mDNSResponder'
alias clean_derived="rm -rf ~/Library/Developer/Xcode/DerivedData/"

alias kca="killall CloudApp"

alias ydl=youtube-dl

export music="$HOME/Music"
export m="$music"
export mu="$music"
export im="$music/iTunes/iTunes Media"
export imu="$im/Music"
export ima="$im/Audiobooks"

alias ovlc="open -a /Applications/VLC.app"
alias vlc='/Applications/VLC.app/Contents/MacOS/VLC'
transcode_vlc() {
    input="$1"; shift
    output="$1"; shift
    vlc -I rc "$input" --sout="#transcode{vcodec=mp4v,vb=1024}:std{access=file,mux=mp4,dst=$output}"
}
export -f transcode_vlc
defn tvlc transcode_vlc

defn oa open -a

open_finder() {
  local finder=
  local paths=("/Applications/Finder.app" "/System/Library/CoreServices/Finder.app")
  for path in "${paths[@]}"; do
    if [ -d "$path" ]; then
      finder="$path"
      break
    fi
  done
  if [ -z "$finder" ]; then
    echo "Finder not found at ${paths[*]}" >&2
    return 1
  fi
  open -a "$finder" "${@:-.}"
}
export -f open_finder
defn of open_finder

defn chrome open -a "\"/Applications/Google Chrome.app\""
defn oc chrome
open_chrome_latest() {
    chrome "$(last-updated "$@")"
}
export -f open_chrome_latest
defn ocl open_chrome_latest
defn olc open_chrome_latest
defn chrm chrome

append_to_path "$HOME/Library/Android/sdk/platform-tools"

export dl="$HOME/Downloads"
export DL="$dl"
export d="$dl"

alias pb=pbpaste
pbp() {
	pbcopy; pbpaste
}
alias pbc=pbcopy
alias pbL="pbpaste | less"

# Like pbcopy, but strip a trailing newline (pasting into bash or other prompts will often unexpectedly execute the pasted text/command otherwise)
copy() {
  cat "$@" | perl -pe 'chomp if eof' | pbcopy
}
export -f copy
defn cy copy
defn cyy pbcopy
ccy() {
	cat "$@" | copy
}
export -f ccy

copy_last_updated() {
  last-updated | copy
}
export -f copy_last_updated
defn clu copy_last_updated
defn luc copy_last_updated

alias pbpn="pbpaste | wc -l"
alias pn="pbpaste | wc -l"
alias pbpl="pbpaste | len"
alias pbl="pbpaste | len"
alias ppl="pbpaste | len"

is_osx() {
  uname -a | grep -iq "Darwin"
}

defn osx is_osx

defn shf defaults write com.apple.finder AppleShowAllFiles YES

# Postgres paths
export PGDIR=/Applications/Postgres.app/Contents/MacOS
export PGHOME=$PGDIR/bin

# namei for OSX: brew install mkdryden/homebrew-misc/namei
defn ni namei

alias pbg="pbpaste | gist -pc"

# Copy current directory path to clipboard
pwy() {
    pwd | ty
}
export -f pwy

if [ -d "/usr/local/Cellar" ]; then
  export hb=/usr/local/Cellar
fi

if [ -d /opt/homebrew/bin ]; then
  export PATH="/opt/homebrew/bin:$PATH"
  if [ -d /opt/homebrew/opt/util-linux/bin ]; then
    export PATH="/opt/homebrew/opt/util-linux/bin:$PATH"
  fi
fi

if [ -s /usr/share/dict/words ]; then
  export dict=/usr/share/dict/words
fi

append_to LIBRARY_PATH /usr/local/opt/openssl/lib

pyei() {
  CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix sqlite)/include" pyenv install "$@"
}
export -f pyei

defn xargs gxargs
defn readlink greadlink

export ss="${SCREENSHOTS_DIR:-$HOME/Screenshots}"

latest_screenshot() {
  last_screenshot="$(ls -t "$ss" | head -n 1)"
  echo "$ss/$last_screenshot"
}
export -f latest_screenshot
defn lsh latest_screenshot

open_latest_screenshot() {
    open "$@" "$(latest_screenshot)"
}
export -f open_latest_screenshot
defn olsh open_latest_screenshot

mv_latest_screenshot() {
  if [ $# -gt 1 ]; then
    echo "Usage: ${FUNCNAME[0]} [dest]" >&2
    return 1
  fi
  local src="$(latest_screenshot)"
  local dst="${1:-./}"
  echo "Moving: $src → $dst"
  mv "$src" "$dst"
}
export -f mv_latest_screenshot
defn mvls mv_latest_screenshot

latest_download() {
  dir="${DOWNLOADS_DIR:-$HOME/Downloads}"
  if [ "$1" == -a ]; then
    last_download="$(last_updated_all "$dir")"
  else
    last_download="$(last_updated "$dir")"
  fi
  echo "$last_download"
}
export -f latest_download
defn ltd latest_download
defn ltda latest_download -a
defn ldl latest_download

ls_latest_download() {
  ls -l "$(latest_download "$@")"
}
export -f ls_latest_download
defn lltd ls_latest_download

mv_latest_download() {
  if [ $# -gt 1 ]; then
    echo "Usage: ${FUNCNAME[0]} [dest]" >&2
    return 1
  fi
  src="$(latest_download)"
  if [ -z "$1" ]; then
    dst="$(basename "$src")"
  else
    dst="$1"
  fi
  echo "Moving: $src → $dst"
  mv "$src" "$dst"
}
export -f mv_latest_download
defn mvld mv_latest_download
defn mvdl mv_latest_download

defn o open
open_last_updated() {
  open "$(last-updated "$@")"
}
export -f open_last_updated
defn ol open_last_updated

if which gdate &>/dev/null; then
  defn date gdate
fi

if which gstat &>/dev/null; then
  defn stat gstat
fi

if which gtouch &>/dev/null; then
  defn touch gtouch
fi

if which gsed &>/dev/null; then
  defn sed gsed
fi

alias ibrew='arch -x86_64 /usr/local/bin/brew'

export OPENBLAS="$(brew --prefix openblas)"
export OPENSSL_ROOT_DIR="$(brew --prefix openssl)"

export PYTHON_CONFIGURE_OPTS="--build=aarch64-apple-darwin20.5.0"
export CONDA_ROOT=/opt/homebrew/Caskroom/mambaforge

# Use GNU coreutils versions of various builtins
export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"

alias bpr="brew --prefix"

alias uk="security -v unlock-keychain ~/Library/Keychains/login.keychain-db"

if [ -d "$HOME/google-cloud-sdk/bin" ]; then
  export PATH="$PATH:$HOME/google-cloud-sdk/bin"
fi
